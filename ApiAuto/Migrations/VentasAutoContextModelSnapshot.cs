// <auto-generated />
using System;
using ApiAuto.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiAuto.Migrations
{
    [DbContext(typeof(VentasAutoContext))]
    partial class VentasAutoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiAuto.Modelos.Auto", b =>
                {
                    b.Property<int>("IdAuto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAuto"));

                    b.Property<int>("AñoFabricación")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Motor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("capacidadPasajeros")
                        .HasColumnType("int");

                    b.Property<string>("chaces")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("kilometrage")
                        .HasColumnType("int");

                    b.Property<int>("puertas")
                        .HasColumnType("int");

                    b.HasKey("IdAuto");

                    b.ToTable("Autos");

                    b.HasData(
                        new
                        {
                            IdAuto = 1,
                            AñoFabricación = 2000,
                            Marca = "Ford",
                            Motor = "V8",
                            Precio = 45000m,
                            capacidadPasajeros = 4,
                            chaces = "---",
                            kilometrage = 450,
                            puertas = 4
                        },
                        new
                        {
                            IdAuto = 2,
                            AñoFabricación = 2000,
                            Marca = "Chevy, Camaro",
                            Motor = "V6",
                            Precio = 8900m,
                            capacidadPasajeros = 4,
                            chaces = "---",
                            kilometrage = 56443,
                            puertas = 2
                        },
                        new
                        {
                            IdAuto = 3,
                            AñoFabricación = 2015,
                            Marca = "Ford Raptor",
                            Motor = "V6, twin turbo",
                            Precio = 50000m,
                            capacidadPasajeros = 4,
                            chaces = "---",
                            kilometrage = 450,
                            puertas = 4
                        },
                        new
                        {
                            IdAuto = 4,
                            AñoFabricación = 2009,
                            Marca = "Porsche 911 turbo s",
                            Motor = "Boxer 6 cilindros",
                            Precio = 150000m,
                            capacidadPasajeros = 4,
                            chaces = "---",
                            kilometrage = 450,
                            puertas = 2
                        },
                        new
                        {
                            IdAuto = 5,
                            AñoFabricación = 2005,
                            Marca = "Ford, fiesta",
                            Motor = "V8",
                            Precio = 25000m,
                            capacidadPasajeros = 4,
                            chaces = "---",
                            kilometrage = 450,
                            puertas = 4
                        },
                        new
                        {
                            IdAuto = 6,
                            AñoFabricación = 2010,
                            Marca = "Toyota, corolla",
                            Motor = "Motor en linea 6 cilindros",
                            Precio = 4000m,
                            capacidadPasajeros = 4,
                            chaces = "---",
                            kilometrage = 450,
                            puertas = 4
                        },
                        new
                        {
                            IdAuto = 7,
                            AñoFabricación = 2020,
                            Marca = "Hyundai, i10",
                            Motor = "1.2 litros",
                            Precio = 6000m,
                            capacidadPasajeros = 4,
                            chaces = "---",
                            kilometrage = 450,
                            puertas = 4
                        },
                        new
                        {
                            IdAuto = 8,
                            AñoFabricación = 2020,
                            Marca = "Hyundai, i20",
                            Motor = "1.0 litros",
                            Precio = 11000m,
                            capacidadPasajeros = 4,
                            chaces = "---",
                            kilometrage = 450,
                            puertas = 4
                        });
                });

            modelBuilder.Entity("ApiAuto.Modelos.Compra", b =>
                {
                    b.Property<int>("IdCompra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCompra"));

                    b.Property<string>("Concepto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdAuto")
                        .HasColumnType("int");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("codigoFact")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCompra");

                    b.HasIndex("IdAuto");

                    b.HasIndex("IdPersona");

                    b.ToTable("Compras");

                    b.HasData(
                        new
                        {
                            IdCompra = 1,
                            Concepto = "Compra de un Ford",
                            Date = new DateTime(2023, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdAuto = 1,
                            IdPersona = 1,
                            Total = 89000m,
                            codigoFact = "120-93782-11"
                        });
                });

            modelBuilder.Entity("ApiAuto.Modelos.Persona", b =>
                {
                    b.Property<int>("IdPersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPersona"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPersona");

                    b.ToTable("Personas");

                    b.HasData(
                        new
                        {
                            IdPersona = 1,
                            Apellidos = "Muñoz",
                            Cedula = "001-160305-1059V",
                            Correo = "davismunoz165@gmail.com",
                            Nombre = "Davis",
                            Password = "12345",
                            Telefono = "89689588",
                            Tipo = "Admin",
                            UsserName = "TheAdmin"
                        });
                });

            modelBuilder.Entity("ApiAuto.Modelos.Compra", b =>
                {
                    b.HasOne("ApiAuto.Modelos.Auto", "autos")
                        .WithMany()
                        .HasForeignKey("IdAuto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAuto.Modelos.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("IdPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("autos");

                    b.Navigation("persona");
                });
#pragma warning restore 612, 618
        }
    }
}
